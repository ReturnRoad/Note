Web Service 
	nginx : web server(static contents),web reverse proxy(http,mail),cache
	varnish,squid:cache 	http headers 
	haproxy : tcp reverse proxy,http reverse proxy 
	keepalived : HA 
	ats : apache traffic server 
	
	MogileFS 	分布式文件格式 		NoSQL(MongoDB)
	
Nginx:engin x 
	apache:MPM(prefork,event)
	c10k,lighttpd,nginx 
	
	http protocol
		request --> response 
		请求报文
			<method><URL><version>
			<headers>
	
			<body>
	
		响应报文 
			<version> <status code> <reason phrase>
			<headers>
	
			<body>
	
		响应码 
			1xx:信息
			2xx:成功信息 
			3xx:重定向 
			4xx:客户端错误
			5xx:服务器端错误
	
		stateless：无状态 不记录用户的状态信息 
			web page:web object 
			http:80/tcp 
				tcp 三次握手,四次断开 
				
				keepalive : 
					时间：timeout 
					数量
					对负载均衡有影响 
	
				cookie:服务器给客户端的唯一标识
					session保持 
						session绑定 
							反均衡 
								session无可用 
						session复制 
							服务器资源消耗过大 
							网络资源 
						session服务器 
							服务器自身的HA　
							
					lvs session绑定 
						sh算法：基于源IP做绑定 
						persistent connnection : 基于源IP做绑定 
						cookie均衡  Tengine
						
	IO模型 
		同步阻塞 
		同步非阻塞
		IO复用 
			select(),poll()
			prefork:select() 
		事件通知  
		异步 
	
	直接IO 
	
		mmap:数据由磁盘直接以页面形式映射进内存中 
	
	(并发编程)处理并发用户请求 
		单进程模型：串行方式响应 
		多进程模型：prefork,一个进程相应一个用户请求,并发使用多个进程实现
		多线程模型：worker,一个进程生成多个线程,一个线程响应一个用户请求，并发使用多个
	线程实现：n进程,n*m个线程 
		事件模型：event,一个线程响应多个用户请求,基于事件驱动机制来维持多个用户请求 
	
	nginx特性
		基本功能 
			静态资源的web服务器，能缓存打开的文件描述符
			反向代理服务器，缓存，负载均衡
			支持fastCGI 
			模块化,非DSO机制,过滤器gzip,SSI和图像大小调整
			支持SSL 
		扩展功能
			基于名称和IP做虚拟主机
			支持Keep alive
			支持平滑配置更新或程序版本升级
			定制访问日志,支持使用日志缓存以提高性能 
			支持url rewrite
			支持路径别名
			支持基于IP及用户的认证 
			支持速率限制，并发限制等
			
	nginx的基本架构
		一个master,生成一个或多个worker 
		事件驱动： kqueue,epoll,/dev/poll
			消息通知： select,poll,rt signals
		支持sendfile,sendfile64
		支持AIO 	异步文件I/O 
		支持mmap 
		
	nginx:非阻塞，事件驱动,一个master多个worker,一个worker响应多个用户请求
		
		基于fastcgi向php web 进行交互
		基于uwsgi于python web 进行交互
		基于http向tomcat web 进行交互
			
	nginx的模块类别 
		核心模块 
		标准模块 
		可选http模块 
		邮件模块 
		第三方模块
	
	Nginx的配置文件 
		main配置段 
		
		events {
		
		}
		
		http {
		
		}
	
		mail {
		
		}
	
		配置参数需要以分号结尾,语法格式 
			参数名 值1 [值2 ...];
			
			支持使用变量 
				模块内置变量 
				用户自定义变量  
					set var_name value 
					
	Nginx基本配置的类别
		用于调试,定位问题的
		正常运行的必备配置 
		优化性能的配置 
		事件类的配置 
		
	worker进程应该以普通用户身份运行：nginx用户,nginx组
		HTTP的方法：GET,HEAD,POST,PUT,DELETE,OPTIONS,TRACE
	
	首先添加用户nginx
	# groupadd -r nginx  
	# useradd -r -g nginx nginx 
	
	编译安装 
	# ./configure \
		--prefix=/usr \
		--sbin-path=/usr/sbin/nginx 
		--conf-path=/etc/nginx/nginx.conf 
		--error-log-path=/var/log/nginx/error.log 
		--http-log-path=/var/log/nginx/access.log 
		--pid-path=/var/run/nginx/nginx.pid 
		--lock-path=/var/log/nginx.lock 
		--user=nginx 
		--group=nginx 
		--with-http_ssl_module 
		--with-http_flv_module 
		--with-http_stub_status_module 
		--with-http_gzip_static_module 
		--http-client-body-temp-paht=/var/tmp/nginx/client/ 	#客户端临时文件存放
		--http-proxy-temp-path=/var/tmp/nginx/proxy/ 		 #代理上游服务器文件临时存放
		--http-fastcgi-temp-path=/var/tmp/nginx/fcgi/		#fcgi文件临时存放文件 
		--http-uwsgi-temp-path=/var/tmp/nginx/uwsgi/ 
		--http-scgi-temp-path=/var/tmp/nginx/scgi/ 
		--with-pcre 
	
	# make && make install 
	
	nginx的配置 
		正常运行的必备配置 
		1.	user username [groupname];
			指定运行worker进程的用户和组
			
		2. 	pid /path/to/pidfile_name;
			指定nginx的pid文件 
	
		3. 	worker_rlimit_nofile #;
			指定一个worker进程所能打开的最大文件句柄
			
		4.	worker_rlimit_sigpending 	#;
			设定每个用户能够发往worker进程的信号的数量
	
		优化性能相关的配置 
		1. worker_process  #;
			worker进程的个数,通常其数值应该为CPU的物理核心数减1
			
		2. worker_cpu_affinity cpumask...;
			0000
			0001
			0010
			0100
			1000
			
			worker_process 6;
			worker_cpu_affinity  00000001 00000010 000001000 00010000 00100000
			
		3. ssl_engin device;
			在存在ssl硬件加速器的服务器上，指定所使用的ssl硬件加速设备 
			
		4. timer_resolution t;
			每次内核事件调用返回时，都会使用gettimeofday()来更新nginx缓存时钟;timeer_resolution
	用于定义每隔多久才会由gettimeofday()更新一次缓存时钟；x86-64更新代价已经很小
	
		5. worker_priority number;
			-20,19之间的值
	
	事件相关的配置 
		1. accept_mutex [on|off];
		是否打开Nginx那些的负载均衡锁，此锁能够让多个worker轮流的，序列化的与新的客户端
	建立连接，通常一个worker进程的负载达到其上限的7/8,master就尽可能不再将请求调度此worker
		
		2. lock_file /path/to/lock_file;
		lock文件 
		
		3. accept_mutex_delay #ms;
		accept锁模式中,一个worker进程为取得accept锁的等待时长
		如果某worker进程在某次试图取得锁时失败了，至少要等待#ms才能再一次请求锁
		
		4. multi_accept {on|off};
		是否允许一次性地响应多个用户请求；默认为off
		
		5. use [epoll|rtsig|select|poll];
		定义使用的事件模型，建议让nginx自动选择
		
		6. worker_connections 
		每个worker能够并发响应最大请求数
		
	用于调试，定位问题：只调试nginx时使用 
		1.	daemon [on|off]
			是否让nginx运行于后台，默认为on，调试时可以设置为off，使得所有信息去输出控制台
	
		2.  master_process on|off 
			是否以master/worker模式运行nginx,默认为on,调试时可以设置off已便追踪
			
		3.  error_log /path/to/error_log level;
			错误日志文件及其级别：调试时可以使用debug级别，但要求编译时必须使用 --with-debug
			默认为error
			
	nginx的http功能
		必须使用虚拟主机来配置站点，每个虚拟主机使用一个server{}段配置 
			server {
			
			}
	
		非虚拟主机的配置或公共配置，需要定义在server之外,http之内
		http {
			directive value; 
			...
			
			server {
			
			}
			
			server {
			
			}
		}
	
	1. server{}
		定义一个虚拟主机：nginx支持使用基于主机名或IP的虚拟主机 
		
	2. listen
		listen address[:port];
		listen port 
		listen unix:socket
		
		default_server:定义此server为http中默认的server;如果所有的server中没有任何一个listen
	使用此参数,那么第一个serve即位默认server 
		rcvbuf=SIZE 	接受缓冲大小 
		sndbuf=SIZE 	发送缓冲大小 
		ssl:https server 
	
	3. server_name [...];	设定主机名 
		server_name 可以跟多个主机名;当nginx收到一个请求时，会取出其首部的server的值，而后跟众server_name进行比较
		名称中可以使用通配符和正则表达式(通常以~开头)
		1.先做精确匹配 	www.magedu.com 
		2.左侧统配符匹配 	*.magedu.com 
		3.右侧通配符匹配 	www.abc.com , www.* 
		4.正则表达式匹配 	~^.*\.magedu\.com$
		
	4. server_name_hash_bucket_size 32|64|128
		为了实现快速主机查找,nginx使用hash来保存主机名 
	
	5. location [ = | ~ | ~* ] uri {...}
	   location @name { ... }
		允许根据用户请求的URI来匹配指定的各location以进行访问配置,匹配到时,将被location块中的配置所处理
		images/logo.gif
		
		=	精确匹配
		~	正则表达式模式匹配，匹配时区分字符大小写
		~*	正则表达式模式匹配，匹配时忽略字符大小写
		^~	URI前半部分匹配，不检查正则表达式
	
		匹配优先级：
			字符字面量最精确匹配
			正则表达式检索(由第一个匹配到的所处理)
			按字符字面量
	
	文件路径定义
		1. root path 
			设置web资源路径，用于指定请求的根文档目录
			location / {
				root /www/htdocs;
			}
				
			location ^~ /images/ {		#/web/images/b.html 
				root /web; 
			}
				http://www.magedu.com/images/b.html 
	
		2. alias path 
			只能用于location中，用于路径别名
			location / {
				root /www/htdocs;
			}
				
			location ^~ /images/ {		#/web/b.html 
				alias /web; 
			}
				http://www.magedu.com/images/b.html			
	
		3. index file ...;
			定义默认页面,可跟多个值
			
		4. error_page code ... [=[response]] uri;
			当对于某个请求返回错误时，如果匹配上了error_page指令中设定的code，则重定向到新的URI
			错误页面重定向	 [=[response]]使用新的状态码记录日志
			
		5. try_file path1 [path2] uri;
			try_file $uri /default.html 	
			自左至右尝试读取由path所指定路径，在第一次找到即停止并返回；如果所有path均不存在，则返回
		最后一个uri
			location ~* ^/documents/(.*)$ {
				root /www/htdocs;
				try_files $uri /docu/$1 /temp.html;
			}
			
			http://www.magedu.com/documents/a.html 
			http://www.magedu.com/docu/a.html 
			http://www.magedu.com/temp.html 
	
	网络连接相关的设置 
		1. keepalive_timeout time; 	默认75秒
			保持连接的超时时长
			
		2. keepalive_requests n;
			在一次长连接上允许承载的最大请求数
			
		3. keepalive_disable [ msie6 | safari | none]
			对指定的浏览器禁止使用长连接
			
		4. tcp_nodelay on|off 
			对keepalive连接是否使用TCP_NODELAY选项
	
		5. client_header_timeout time;
			读取http请求首部的超时时长
			
		6. client_body_timeout time;
			读取http请求包体的超时时长
			
		7. send_timeout time;
			发送相应的超时时长
			
		对客户端请求的限制：
		1.	limit_except method ... {...}			#只能定义在location中
			指定对范围之外的其他方法的访问控制
			limit_except GET {
				allow 172.16.0.0/16;
				deny all;
			} 
	
		2. client_max_body_size SIZE;
			http请求包体的最大值:常用于限定客户所能够请求的最大包体；根据http请求首部中的content length
	的值来检测，避免无用的传输
		
		3. limit_rate speed;
			限制客户端每秒钟传输的字节数，默认为0，表示没有限制
	
		4. limit_rate_after time 
			nginx向客户发送响应报文时，如果时长超出了此处指定的时长，则后续的发送过程开始限速
	
	文件操作的优化：
		1. sendfile on|off 
			是否启用sendfile功能
		
		2. aio on|off 
			是否启用aio功能
			
		3. open_file_cache max=N [inactive=time]|off 
			是否打开文件缓存功能
				max：缓存条目的最大值；当满了以后将根据LRU算法进行置换
				inactive: 某缓存条目在指定时长时没有被访问过时，将自动被删除；默认为60s
				缓存的信息包括：
					文件句柄，文件大小，上次修改时间
					已经打开的目录结构
					没有找到或没有访问权限的信息
		
		4. open_file_cache_error on|off 
			是否缓存文件找不到或没有权限访问等相关信息
			
		5. open_file_cache_valid time;
			多长时间检查一次缓存中的条目是否超出非活动时长,默认为60s 
		
		6. open_file_cache_min_use #;
			在inactive指定的时长内被访问超出此处指定的次数时，才不会被删除
			
	对客户端请求的特殊处理
		1. ignore_invalid_headers on|off 
			是否忽略不合法的http首部；默认为on；off意味着请求首部中出现不合规的首部将
		拒绝相应
		2. log_not_found on|off 
			当用户访问的文件不存在时，是否将文件找不到的信息记录到错误日志中
		3. resolver address;
			指定nginx使用的dns服务器地址
		4. resover_timeout time;
			指定DNS解析超时时长,默认为30s;
		5. server_token on|off;
			是否在错误页面中显示nginx的版本号
			
	http核心模块的内置变量
		$uri 	当前请求的uri,不带参数
		$request_uri	请求的uri，带完整参数
		$host 	http请求报文中host首部，如果请求中没有host首部，则以处理此请求的虚拟主机的
	主机名代替
		$hostname 	nginx服务运行在的主机的主机名
		$remote_addr 	客户端IP
		$remote_port 	客户端Port
		$remote_user 	使用用户认证时客户端输入的用户名 
		$request_filename	用户请求中的URI经过本地root或alias转换后映射的本地的文件路径
		$request_method		请求方法
		$server_addr		服务器地址
		$server_name 		服务器名称
		$server_port		服务器端口 
		$server_protocol	服务器向客户端发送响应时的协议 http/1.1 
		$scheme		在请求中使用scheme,如https://www.server.com/中的https
		$http_HEADER		匹配请求报文中只当的HEADER，$http_host匹配请求报文中的host首部
		$sent_http_HEADER	匹配响应报文中指定的HEADER  列如$http_content_type匹配相应报文中的content-type首部
		$document_root 		当前请求映射到的root配置
	
	
	配置使用nginx
		1. nginx虚拟主机
			server {
				listen 80;
				server_name www.a.org;
				root /www/b.org;
				
				deny 172.16.1.10;
				allow 172.16.0.0/16;
				deny all;
				
				location /admin/ {
					root /www/b.org 
					auth_basic "admin area";
					auth_basic_user_file /etc/nginx/.htpasswd;          #htpasswd -c -m ... username 
				}
				
				location /download/ {
					root /www/b.org/;
					autoindex on; 
				}
			}
	
	
		2.建立下载站点时
			autoindex on|off 	#默认off 
	
		3.日志自定义
		log_format compression '$remote_addr - $remote_user [$time_local]'
							   '"$request" $status $bytes_sent'
							   '"$http_referer" "$http_user_agent" "$gzip_ratio"' ;
							   
		access_log /spool/logs/nginx-access.log compression buffer=32k 
	
		4.防盗链
			(1) 定义合规的引用
		
				valid_referers none blocked server_names
					*.example.com example.* www.example.org/galleries 
					~\.google\.:
	
			(2) 拒绝不合规的指定
				
				if ($invalid_referer) {
					rewrite ^/.*$ http://www.b.org/403.html  
				}
	
				location ~* \.(jpg|png|gi|jpeg)$ {
					root /www/b.org/;
					valid_referers none blocked www.b.org *.b.org;
					if ($invalid_referer) {
						rewrite ~/ http://www.server.com/403.html; 
					}
				}
	
		5. URL rewrite 	需要应用pcre功能
			rewrite regex replacement [flag];
			
			location / {
				root /www/b.org;
				rewrite ^/images/(.*)$ /imgs/$1 last;
				rewrite ^/imgs/(.*)$ /images/$1;
			}
				http://www.b.org/images/a.jpg --> http://www/b.org/imgs/a.jpg 
				last : 一旦被当前规则匹配并重写之后立即停止检查后续的其他rewrite的规则,而后通过重写
			的规则重新发送请求
				break : 一旦被当前规则匹配并重写后立即停止后续的其他rewrite的规则,而后继续由nginx进行
			后续操作 
				redirect:返回302临时重定向
				permanent:返回301永久重定向
	
			location /download/ {
				rewrite ^(/download/.*)/media/(.*)\..*$ $1/media/$2.mp3 last;		#死循环
			}
			
			nginx最多循环10次,超出之后会返回500错误
			注意：一般将rewrite写在location中时都使用break标记，或者将rewrite写在if上下文中
			
		rewrite_log on|off 
			是否把重写过程记录在错误日志中;默认为notice级别;默认为off;
			
		rewrite code
			用于结束rewrite规则,并为客户返回状态码;可以使用的状态码有204,400,402-406,500-504等
			
		if (condition) {
			
		}
	
	6. nginx状态信息页面
		location /nginx_status {
			stub_status on;
			access_log off;
			allow SOME.IP.ADD.RESS;
			deny all;
		}
	
	reading : 正在接受的新连接
	writing : 正在构建响应报文的请求数
	waiting : 长连接中处于活动状态的请求数
	
	7. 压缩
	http {
		gzip on;
		gzip_http_version 1.0;
		gzip_comp_level 2;
		gzip_types text/plain text/css application/x-javascript text/xml application/xml 
		gzip_disable msie6;
	}
	
	
	内存及磁盘资源分配
		1. client_body_in_file_only on|clean|off; 
			HTTP的包体是否存储在磁盘文件中,非off表示存储,即使包体大小为0也会创建一个磁盘文件,on表示请求结束
		后包体文件不会被删除,clean表示会被删除
		
		2. client_body_in_single_buffer on|off; 
			HTTP的包体是否存储在内存buffer当中,默认为off;
			
		3. client_body_buffer_size size;  8k default 
			nginx接受HTTP包体的内存缓冲大小,超出则会写到磁盘文件中 
			
		4. client_body_temp_path dir-path [level1 [level2 [level3]]];
			HTTP包体存放的临时目录 level表示子目录
			client_body_temp_path /var/tmp/client 1 2 		1一个16进制命名的子目录 2 256个子目录
		
		5. client_header_buffer_size size;
			正常情况下接受用户请求的http报文header部分时分配的buffer大小	默认为1k
			
		6. large_client_header_buffer number size; 
			存储超大http请求首部的内存buffer大小及个数;
			
		7. connection_pool_size size;
			nginx对于每个建立成功的tcp连接都会预先分配一个内存池,此处即用于设定内存池的初始大小,默认256
			
		8. request_pool_size size;
			nginx在处理每个http请求时会预先分配一个内存池,此处用于设定此内存池的初始大小,默认为4k
		
	proxy 
		server {
			listen 80;
			server_name www.c.net;
			location /admin {
				proxy_pass http://172.16.100.9/;
				proxy_set_header X-Real-IP $remote_addr;
			}
		}
				
	upstream使用注意
		1.只能用于http上下文 
		2.各server只能直接使用IP或主机名
	
		server address [parameters];
			weight=#		设定权重
			max_fails=#		最大失败尝试次数,默认为1
			fail_timeout=time 	失败尝试超时时长,默认为10秒
		
	http {
		upstream webservers {
			server 172.16.100.9 weight=3 max_fails=2 fail_timeout=3;
			server 172.16.100.10 weight=1 max_fails=2 fail_timeout=3;
			server 127.0.0.1:8080 backup;   当使用IPHash时，此项没有意义
			ip_hash;		#相当于SH算法
			least_conn;		#动态计算连接
		}
		
		server {
			listen 80;
			server_name www.b.org;
			add_header X-via $server_addr 
			
			location /admin {
				proxy_pass http://webservers/;
				proxy_set_header X-Real-IP $remote_addr;
			}
		}	
	}
	
	health checks
	http {
		server {
		...
			location / {
				proxy_pass http://backend;
				health_check match=welcome;
			}
		}
		
		match welcome {
			status 200;
			header Content-Type = text/html;
			body ~ "Welcome to nginx!";
		}
	}
	
	proxy指令
		proxy_pass URL;
		
		proxy_set_header 将来自与客户端请求报文转发到上游服务器时，修改首部中的值
		proxy_hide_header 隐藏相应给客户端响应报文中的首部的值
		proxy_pass_header 让某个来自于上游服务的首部原封不动的通过
		proxy_pass_request_body 是否将http请求报文的包体发往上游服务器
		proxy_pass_request_header 是否将http首部发往上游服务器 用于location中 
		proxy_redirect [default|off|redirect|replacement]
			当上游服务器返回的响应是重定向或刷新请求(301 302)，redirect会重新设定http首部的
		location或refresh
			http://www.server.com/images/some/path 		http://localhost:8080/imgs/some/path 
			proxy_redirect http://localhost:8080/imgs http://www.server.com/images 
			
		proxy_next_upstream
			当一台上游服务器响应发生错误时，返回指定的upstream 
	
	
	http {
    proxy_cache_path  /data/nginx/cache  levels=1:2    keys_zone=STATIC:10m
                                         inactive=24h  max_size=1g;
    server {
        location / {
            proxy_pass             http://www.server.com;
            proxy_set_header       Host $host;
            proxy_cache            STATIC;
            proxy_cache_valid      200  1d;
            proxy_cache_valid	   301 302 10m;
            proxy_cache_vaild 	   any 1m;
            proxy_cache_use_stale  error timeout invalid_header updating
                                   http_500 http_502 http_503 http_504;
        }
    }
}
	
	
	
	fastcgi模块的常用指令
		fastcgi_pass	指定fastcgi服务监听端口，地址，也支持使用Unix Sock;
		fastcgi_bind 	指定联系fpm服务时使用的地址 
		fastcgi_index	php的主页面文件 
		fastcgi_param	定义传递给fpm服务器的参数 
		
		
		结果可以缓存，缓存空间使用proxy_cache_path定义,使用fastcgi_cache来调用
	
		fastcgi_cache_path /cache/fastcgi levels=1:2 keys_zone=fcgi:50m max_size=1g 
												inactive=12h;  

		fastcgi_cache fcgi 
		fastcgi_cache_valid 	200   1d;
		fastcgi_cache_valid 	301 302  1d;
		
		fastcgi_connect_timeout		连接fastcgi服务器的超时时长
		fastcgi_send_timeout		向fastcgi服务传输数据的超时时长
		
		#配置nginx转发php-fpm的status和ping测试页面 
		location ~* /(status|ping) {
			root 	/www/a.com;
			fastcgi_pass 	127.0.0.1:9000;
			fastcgi_param 	SCRIPT_FILENAME		$fastcgi_script_name;
			include			fastcgi_params;
		}
	
	
		1. 进程池的名称 
		2. 进程管理器，有两种类型static和dynamic
		3. 启动时间
		4. 运行时长
		5. 已经接受的请求数
		6. 等待队列中的请求数
		7. 等待队列的最大长度 
		8. 等待队列长度 
		9. 空闲的进程数
		10. 总进程数
		11. fpm启动以来最大活动进程数
		12. 达到最大子进程的次数
		13. 慢速请求的个数 
	
	
	
	
	Linux 	malloc() free() 
		#tmalloc() 		内存申请和释放需要进行系统调用 
		slab allocator 
		
		Page:分配给slab用于切割的内存空间,默认为1MB
		Chunk:用户缓存的内存空间
		Slab Class:特定大小的Chunk组
		
		自定义增长因子 
			
			memcached 协议：文本格式,二进制格式
	
			hash/3
				0,1,2 
				
			一致性hash算法 		consistent hashing 
			
		libevent库 	epoll,poll,select 		
		
		yum list all libevent* 
			
			
			memcached 
				-l 指定监听的地址 
				-d 运行为守护进程
				-u 以指定的身份运行
				-m # 缓存服务使用的内存空间 MB 默认为64MB 
				-c # 最大并发连接数,默认1024
				-k 锁定内存页
				-p # 监听的TCP端口 默认11211
				-U # 监听的UDP端口 默认11211 0表示禁用
				-M 当内存耗尽时返回错误而非释放
				-f 指定增长因子 默认 1.25 
				-n chunk的最小起始大小, key+value+flags 默认为48 
				-t <thread>		单线程响应多用户请求
				
			程序员在开发时，自行调用了memcached的API,memcached的功能才能生效
				Memcached	服务器名称
				memcached 	php连接memcached服务可以使用扩展
				memcache 	php连接memcached服务可以使用另一个扩展
				libmemcached	C库
				
				
			LNMMP 
	
	Nginx整合memcached
	
	server {
		listen 80;
		server_name 	www.server.com;
		
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
<h1>www.a.com</h1>
<img src="http://www.b.org/images/1.jpg">
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	yum install -y "Development Tools" "Server Platform Development"
	yum install -y pcre-devel 
	
	
	
	
	
	
	
	
	